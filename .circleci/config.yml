version: 2.1

orbs:
    slack: circleci/slack@4.12.0

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow-id:
                description: Name of the stack to destroy.
                type: string
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      echo "Destroying environment: << parameters.workflow-id >> " && \
                      aws s3 rm s3://udapeople-<<parameters.workflow-id>> --recursive && \
                      aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow-id>>" && \
                      aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow-id>>"

    revert-migrations:
        description: Revert the last migration
        parameters:
            workflow-id:
                type: string
        steps:
            - run:
                  name: Revert migrations
                  when: on_fail
                  command: |
                      SUCCESS=$(curl --insecure  https://kvdb.io/7Xbtoj3hhzA4wFwTudyxRS/migration_<< parameters.workflow-id >>)
                      echo $SUCCESS
                      if (( ${SUCCESS} == 1 ));
                      then
                          cd backend
                          npm install
                          npm run migration:revert
                      fi
jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Build front-end
                  command: |
                      cd frontend && \
                      npm install && \
                      npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: pass
                  template: basic_success_1

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Back-end build
                  command: |
                      cd backend && \
                      npm install && \
                      npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: pass
                  template: basic_success_1
    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Run frontend test
                  command: |
                      cd frontend && \
                      npm install && \
                      npm run test
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Run backend test
                  command: |
                      cd backend && \
                      npm install && \
                      npm run test
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Run frontend vulnerability scan
                  command: |
                      cd frontend && \
                      npm install && \
                      npm audit fix --audit-level=critical --force && \
                      npm audit fix --force && \
                      npm audit --audit-level=critical
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Run backend vulnerability scan
                  command: |
                      cd backend && \
                      npm install && \
                      npm audit fix --audit-level=critical --force && \
                      npm audit fix --force && \
                      npm audit --audit-level=critical
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1

    deploy-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Install tar utility
                  command: |
                      yum install -y tar gzip
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/backend.yml \
                      --tags project=udapeople \
                      --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region=us-east-1
            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/frontend.yml \
                      --tags project=udapeople \
                      --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region=us-east-1
            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      echo $(aws ec2 describe-instances \
                      --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --region=us-east-1 \
                      --output text) >>~/project/.circleci/ansible/hosts && \
                      cat ~/project/.circleci/ansible/hosts
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/hosts
            - destroy-environment:
                  workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: pass
                  template: basic_success_1

    configure-infrastructure:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      ["8c:ef:3c:59:d1:8e:be:69:40:28:0e:90:4e:76:b9:47"]
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      sudo apt update && \
                      sudo apt upgrade && \
                      sudo apt install ansible && \
                      sudo apt install tar && \
                      sudo apt install gzip && \
                      sudo apt install curl && \
                      sudo apt install awscli
            - run:
                  name: Configure server
                  command: |
                      cd .circleci/ansible && \
                      ansible-playbook -i hosts configure-server.yml
            - destroy-environment:
                  workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1

    run-migrations:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - attach_workspace:
                  at: ~/
            - run:
                  name: Run migrations
                  command: |
                      cd backend && \
                      npm install && \
                      npm run migrations > migrations_dump.txt
            - run:
                  name: Send migration results to memstash
                  command: |
                      if grep -q "has been executed successfully." backend/migrations_dump.txt
                      then 
                        curl --insecure https://kvdb.io/7Xbtoj3hhzA4wFwTudyxRS/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                      fi
            - destroy-environment:
                  workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1

    deploy-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      sudo apt update && \
                      sudo apt upgrade && \
                      sudo apt install ansible && \
                      sudo apt install tar && \
                      sudo apt install gzip && \
                      sudo apt install curl && \
                      sudo apt install python3 && \
                      sudo apt install awscli
            - run:
                  name: Get backend url
                  command: |
                      export BACKEND_IP=$(aws ec2 describe-instances \
                      --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --region=us-east-1 \
                      --output text) && \
                      export API_URL="http://${BACKEND_IP}:3030" && \
                      echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            - run:
                  name: Deploy frontend objects
                  command: |
                      cd frontend && \
                      npm install && \
                      npm run build && \
                      tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist &&\
                      aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy-environment:
                  workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations:
                  workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: pass
                  template: basic_success_1

    deploy-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      ["8c:ef:3c:59:d1:8e:be:69:40:28:0e:90:4e:76:b9:47"]
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      sudo apt update && \
                      sudo apt upgrade && \
                      sudo apt install ansible && \
                      sudo apt install tar && \
                      sudo apt install gzip && \
                      sudo apt install curl && \
                      sudo apt install awscli
            - run:
                  name: Deploy backend
                  command: |
                      cd backend && \
                      npm i && \
                      npm run build && \
                      cd .. && \
                      tar -C backend -czvf artifact.tar.gz . && \
                      cp artifact.tar.gz .circleci/ansible/roles/deploy/files/. &&\
                      cd .circleci/ansible && \
                      echo "Contents  of the hosts file is -------" && \
                      cat hosts && \
                      ansible-playbook -i hosts deploy-backend.yml
            - destroy-environment:
                  workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations:
                  workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: pass
                  template: basic_success_1

    smoke-test:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      sudo apt update && \
                      sudo apt upgrade && \
                      sudo apt install ansible && \
                      sudo apt install tar && \
                      sudo apt install gzip && \
                      sudo apt install curl && \
                      sudo apt install awscli

            - run:
                  name: Backend smoke test.
                  command: |
                      export BACKEND_IP=$(aws ec2 describe-instances \
                      --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --region=us-east-1 \
                      --output text) && \
                      export API_URL="http://${BACKEND_IP}:3030" &&\
                      echo ${API_URL} &&\
                      if curl "${API_URL}/api/status" | grep "ok"
                      then
                        exit 0
                      else
                        exit 1
                      fi
            - run:
                  name: Frontend smoke test.
                  command: |
                      URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
                      if curl -s ${URL} | grep "Welcome"
                      then 
                        exit 1
                      else
                        exit 1
                      fi
            - destroy-environment:
                  workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations:
                  workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeam"
                  template: basic_fail_1

    cloudfront-update:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Install dependencies
                  command: |
                      echo "nothing"
            - run:
                  name: Update cloudfront distribution
                  command: |
                      aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name InitialStack --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" --region us-east-1
            - destroy-environment:
                  workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations:
                  workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: fail
                  mentions: "@EngineeringTeamMembers"
                  template: basic_fail_1
            - slack/notify:
                  channel: space-shuttle-engineering
                  branch_pattern: main
                  event: pass
                  template: basic_success_1

    cleanup:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Get old stack workflow id
                  command: |
                      export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
                      echo OldWorkflowID: "${OldWorkflowID}"
                      echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                      export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
                      echo Stack names: "${STACKS[@]}"
            - run:
                  name: Remove old stacks and files
                  command: |
                      export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text) && \
                        if [[ "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
                        then
                            aws s3 rm "s3://${OldWorkflowID}" --recursive
                            aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                            aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                        fi
workflows:
    default:
        jobs:
            - build-frontend:
                  context: UdaPeopleContext
            - build-backend:
                  context: UdaPeopleContext
            - test-frontend:
                  requires:
                      - build-frontend
                  context: UdaPeopleContext
            - test-backend:
                  requires:
                      - build-backend
                  context: UdaPeopleContext
            - scan-frontend:
                  requires:
                      - build-frontend
                  context: UdaPeopleContext
            - scan-backend:
                  requires:
                      - build-backend
                  context: UdaPeopleContext
            - deploy-infrastructure:
                  requires:
                      - test-frontend
                      - test-backend
                      - scan-frontend
                      - scan-backend
                  context: UdaPeopleContext
            - configure-infrastructure:
                  requires:
                      - deploy-infrastructure
                  context: UdaPeopleContext
            - run-migrations:
                  requires:
                      - configure-infrastructure
                  context: UdaPeopleContext
            - deploy-frontend:
                  requires:
                      - run-migrations
                  context: UdaPeopleContext
            - deploy-backend:
                  requires:
                      - run-migrations
                  context: UdaPeopleContext
            - smoke-test:
                  requires:
                      - deploy-frontend
                      - deploy-backend
                  context: UdaPeopleContext
            - cloudfront-update:
                  requires:
                      - smoke-test
                  context: UdaPeopleContext
            - cleanup:
                  requires:
                      - cloudfront-update
                  context: UdaPeopleContext
